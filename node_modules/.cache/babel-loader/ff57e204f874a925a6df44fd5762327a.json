{"ast":null,"code":"import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioBufferSourceNodeStartMethodConsecutiveCalls } from '../helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls';\nimport { wrapAudioBufferSourceNodeStartMethodDurationParameter } from '../helpers/wrap-audio-buffer-source-node-start-method-duration-parameter';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport var createNativeAudioBufferSourceNodeFactory = function createNativeAudioBufferSourceNodeFactory(addSilentConnection, cacheTestResult, createNativeAudioNode, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodDurationParameterSupport, testAudioBufferSourceNodeStartMethodOffsetClampingSupport, testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClampling, wrapAudioBufferSourceNodeStopMethodNullifiedBuffer, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) {\n  return function (nativeContext, options) {\n    var nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, function (ntvCntxt) {\n      return ntvCntxt.createBufferSource();\n    });\n    assignNativeAudioNodeOptions(nativeAudioBufferSourceNode, options);\n    assignNativeAudioNodeAudioParamValue(nativeAudioBufferSourceNode, options, 'playbackRate'); // Bug #71: Edge does not allow to set the buffer to null.\n\n    assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'buffer'); // Bug #149: Safari does not yet support the detune AudioParam.\n\n    assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loop');\n    assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopEnd');\n    assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopStart'); // Bug #69: Safari does allow calls to start() of an already scheduled AudioBufferSourceNode.\n\n    if (!cacheTestResult(testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, function () {\n      return testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(nativeContext);\n    })) {\n      wrapAudioBufferSourceNodeStartMethodConsecutiveCalls(nativeAudioBufferSourceNode);\n    } // Bug #92: Chrome & Edge do not respect the duration parameter yet.\n\n\n    if (!cacheTestResult(testAudioBufferSourceNodeStartMethodDurationParameterSupport, testAudioBufferSourceNodeStartMethodDurationParameterSupport)) {\n      wrapAudioBufferSourceNodeStartMethodDurationParameter(nativeAudioBufferSourceNode, nativeContext);\n    } // Bug #154 & #155: Safari does not handle offsets which are equal to or greater than the duration of the buffer.\n\n\n    if (!cacheTestResult(testAudioBufferSourceNodeStartMethodOffsetClampingSupport, function () {\n      return testAudioBufferSourceNodeStartMethodOffsetClampingSupport(nativeContext);\n    })) {\n      wrapAudioBufferSourceNodeStartMethodOffsetClampling(nativeAudioBufferSourceNode);\n    } // Bug #162: Safari does throw an error when stop() is called on an AudioBufferSourceNode which has no buffer assigned to it.\n\n\n    if (!cacheTestResult(testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, function () {\n      return testAudioBufferSourceNodeStopMethodNullifiedBufferSupport(nativeContext);\n    })) {\n      wrapAudioBufferSourceNodeStopMethodNullifiedBuffer(nativeAudioBufferSourceNode, nativeContext);\n    } // Bug #44: Only Chrome, Firefox & Opera throw a RangeError yet.\n\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, function () {\n      return testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext);\n    })) {\n      wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeAudioBufferSourceNode);\n    } // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, function () {\n      return testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext);\n    })) {\n      wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeAudioBufferSourceNode, nativeContext);\n    } // Bug #44: Only Firefox does not throw a RangeError yet.\n\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, function () {\n      return testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext);\n    })) {\n      wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeAudioBufferSourceNode);\n    } // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.\n\n\n    addSilentConnection(nativeContext, nativeAudioBufferSourceNode);\n    return nativeAudioBufferSourceNode;\n  };\n};","map":{"version":3,"sources":["../../../src/factories/native-audio-buffer-source-node-factory.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioBufferSourceNodeStartMethodConsecutiveCalls } from '../helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls';\nimport { wrapAudioBufferSourceNodeStartMethodDurationParameter } from '../helpers/wrap-audio-buffer-source-node-start-method-duration-parameter';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeAudioBufferSourceNodeFactory = (addSilentConnection, cacheTestResult, createNativeAudioNode, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodDurationParameterSupport, testAudioBufferSourceNodeStartMethodOffsetClampingSupport, testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClampling, wrapAudioBufferSourceNodeStopMethodNullifiedBuffer, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {\n    return (nativeContext, options) => {\n        const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createBufferSource());\n        assignNativeAudioNodeOptions(nativeAudioBufferSourceNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeAudioBufferSourceNode, options, 'playbackRate');\n        // Bug #71: Edge does not allow to set the buffer to null.\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'buffer');\n        // Bug #149: Safari does not yet support the detune AudioParam.\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loop');\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopEnd');\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopStart');\n        // Bug #69: Safari does allow calls to start() of an already scheduled AudioBufferSourceNode.\n        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, () => testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(nativeContext))) {\n            wrapAudioBufferSourceNodeStartMethodConsecutiveCalls(nativeAudioBufferSourceNode);\n        }\n        // Bug #92: Chrome & Edge do not respect the duration parameter yet.\n        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodDurationParameterSupport, testAudioBufferSourceNodeStartMethodDurationParameterSupport)) {\n            wrapAudioBufferSourceNodeStartMethodDurationParameter(nativeAudioBufferSourceNode, nativeContext);\n        }\n        // Bug #154 & #155: Safari does not handle offsets which are equal to or greater than the duration of the buffer.\n        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodOffsetClampingSupport, () => testAudioBufferSourceNodeStartMethodOffsetClampingSupport(nativeContext))) {\n            wrapAudioBufferSourceNodeStartMethodOffsetClampling(nativeAudioBufferSourceNode);\n        }\n        // Bug #162: Safari does throw an error when stop() is called on an AudioBufferSourceNode which has no buffer assigned to it.\n        if (!cacheTestResult(testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, () => testAudioBufferSourceNodeStopMethodNullifiedBufferSupport(nativeContext))) {\n            wrapAudioBufferSourceNodeStopMethodNullifiedBuffer(nativeAudioBufferSourceNode, nativeContext);\n        }\n        // Bug #44: Only Chrome, Firefox & Opera throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeAudioBufferSourceNode);\n        }\n        // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeAudioBufferSourceNode, nativeContext);\n        }\n        // Bug #44: Only Firefox does not throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeAudioBufferSourceNode);\n        }\n        // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.\n        addSilentConnection(nativeContext, nativeAudioBufferSourceNode);\n        return nativeAudioBufferSourceNode;\n    };\n};\n//# sourceMappingURL=native-audio-buffer-source-node-factory.js.map"]},"metadata":{},"sourceType":"module"}