{"ast":null,"code":"import _objectSpread from \"/Users/levipatel/Github/DingsAndEchoes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/levipatel/Github/DingsAndEchoes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/levipatel/Github/DingsAndEchoes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/levipatel/Github/DingsAndEchoes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/levipatel/Github/DingsAndEchoes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/levipatel/Github/DingsAndEchoes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nvar DEFAULT_OPTIONS = {\n  buffer: null,\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  // Bug #149: Safari does not yet support the detune AudioParam.\n  loop: false,\n  loopEnd: 0,\n  loopStart: 0,\n  playbackRate: 1\n};\nexport var createAudioBufferSourceNodeConstructor = function createAudioBufferSourceNodeConstructor(audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(AudioBufferSourceNode, _audioNodeConstructor);\n\n    var _super = _createSuper(AudioBufferSourceNode);\n\n    function AudioBufferSourceNode(context) {\n      var _this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_OPTIONS;\n\n      _classCallCheck(this, AudioBufferSourceNode);\n\n      var nativeContext = getNativeContext(context);\n\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n\n      var nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, mergedOptions);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var audioBufferSourceNodeRenderer = isOffline ? createAudioBufferSourceNodeRenderer() : null;\n      _this = _super.call(this, context, false, nativeAudioBufferSourceNode, audioBufferSourceNodeRenderer);\n      _this._audioBufferSourceNodeRenderer = audioBufferSourceNodeRenderer;\n      _this._isBufferNullified = false;\n      _this._isBufferSet = options.buffer !== null && options.buffer !== undefined;\n      _this._nativeAudioBufferSourceNode = nativeAudioBufferSourceNode;\n      _this._onended = null; // Bug #73: Edge & Safari do not export the correct values for maxValue and minValue.\n\n      _this._playbackRate = createAudioParam(_assertThisInitialized(_this), isOffline, nativeAudioBufferSourceNode.playbackRate, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      return _this;\n    }\n\n    _createClass(AudioBufferSourceNode, [{\n      key: \"start\",\n      value: function start() {\n        var _this2 = this;\n\n        var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var duration = arguments.length > 2 ? arguments[2] : undefined;\n\n        this._nativeAudioBufferSourceNode.start(when, offset, duration);\n\n        if (this._audioBufferSourceNodeRenderer !== null) {\n          this._audioBufferSourceNodeRenderer.start = duration === undefined ? [when, offset] : [when, offset, duration];\n        } else {\n          setInternalStateToActive(this);\n\n          var resetInternalStateToPassive = function resetInternalStateToPassive() {\n            _this2._nativeAudioBufferSourceNode.removeEventListener('ended', resetInternalStateToPassive); // @todo Determine a meaningful delay instead of just using one second.\n\n\n            setTimeout(function () {\n              return setInternalStateToPassive(_this2);\n            }, 1000);\n          };\n\n          this._nativeAudioBufferSourceNode.addEventListener('ended', resetInternalStateToPassive);\n        }\n      }\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n        this._nativeAudioBufferSourceNode.stop(when);\n\n        if (this._audioBufferSourceNodeRenderer !== null) {\n          this._audioBufferSourceNodeRenderer.stop = when;\n        }\n      }\n    }, {\n      key: \"buffer\",\n      get: function get() {\n        if (this._isBufferNullified) {\n          return null;\n        }\n\n        return this._nativeAudioBufferSourceNode.buffer;\n      },\n      set: function set(value) {\n        // Bug #71: Edge does not allow to set the buffer to null.\n        try {\n          this._nativeAudioBufferSourceNode.buffer = value;\n        } catch (err) {\n          if (value !== null || err.code !== 17) {\n            throw err;\n          } // This will modify the buffer in place. Luckily that works in Edge and has the same effect as setting the buffer to null.\n\n\n          if (this._nativeAudioBufferSourceNode.buffer !== null) {\n            var buffer = this._nativeAudioBufferSourceNode.buffer;\n            var numberOfChannels = buffer.numberOfChannels;\n\n            for (var i = 0; i < numberOfChannels; i += 1) {\n              buffer.getChannelData(i).fill(0);\n            }\n\n            this._isBufferNullified = true;\n          }\n        } // Bug #72: Only Chrome, Edge & Opera do not allow to reassign the buffer yet.\n\n\n        if (value !== null) {\n          if (this._isBufferSet) {\n            throw createInvalidStateError();\n          }\n\n          this._isBufferSet = true;\n        }\n      }\n    }, {\n      key: \"loop\",\n      get: function get() {\n        return this._nativeAudioBufferSourceNode.loop;\n      },\n      set: function set(value) {\n        this._nativeAudioBufferSourceNode.loop = value;\n      }\n    }, {\n      key: \"loopEnd\",\n      get: function get() {\n        return this._nativeAudioBufferSourceNode.loopEnd;\n      },\n      set: function set(value) {\n        this._nativeAudioBufferSourceNode.loopEnd = value;\n      }\n    }, {\n      key: \"loopStart\",\n      get: function get() {\n        return this._nativeAudioBufferSourceNode.loopStart;\n      },\n      set: function set(value) {\n        this._nativeAudioBufferSourceNode.loopStart = value;\n      }\n    }, {\n      key: \"onended\",\n      get: function get() {\n        return this._onended;\n      },\n      set: function set(value) {\n        var wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n        this._nativeAudioBufferSourceNode.onended = wrappedListener;\n        var nativeOnEnded = this._nativeAudioBufferSourceNode.onended;\n        this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n      }\n    }, {\n      key: \"playbackRate\",\n      get: function get() {\n        return this._playbackRate;\n      }\n    }]);\n\n    return AudioBufferSourceNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"sources":["../../../src/factories/audio-buffer-source-node-constructor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nconst DEFAULT_OPTIONS = {\n    buffer: null,\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    // Bug #149: Safari does not yet support the detune AudioParam.\n    loop: false,\n    loopEnd: 0,\n    loopStart: 0,\n    playbackRate: 1\n};\nexport const createAudioBufferSourceNodeConstructor = (audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {\n    return class AudioBufferSourceNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const audioBufferSourceNodeRenderer = ((isOffline ? createAudioBufferSourceNodeRenderer() : null));\n            super(context, false, nativeAudioBufferSourceNode, audioBufferSourceNodeRenderer);\n            this._audioBufferSourceNodeRenderer = audioBufferSourceNodeRenderer;\n            this._isBufferNullified = false;\n            this._isBufferSet = options.buffer !== null && options.buffer !== undefined;\n            this._nativeAudioBufferSourceNode = nativeAudioBufferSourceNode;\n            this._onended = null;\n            // Bug #73: Edge & Safari do not export the correct values for maxValue and minValue.\n            this._playbackRate = createAudioParam(this, isOffline, nativeAudioBufferSourceNode.playbackRate, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        }\n        get buffer() {\n            if (this._isBufferNullified) {\n                return null;\n            }\n            return this._nativeAudioBufferSourceNode.buffer;\n        }\n        set buffer(value) {\n            // Bug #71: Edge does not allow to set the buffer to null.\n            try {\n                this._nativeAudioBufferSourceNode.buffer = value;\n            }\n            catch (err) {\n                if (value !== null || err.code !== 17) {\n                    throw err;\n                }\n                // This will modify the buffer in place. Luckily that works in Edge and has the same effect as setting the buffer to null.\n                if (this._nativeAudioBufferSourceNode.buffer !== null) {\n                    const buffer = this._nativeAudioBufferSourceNode.buffer;\n                    const numberOfChannels = buffer.numberOfChannels;\n                    for (let i = 0; i < numberOfChannels; i += 1) {\n                        buffer.getChannelData(i).fill(0);\n                    }\n                    this._isBufferNullified = true;\n                }\n            }\n            // Bug #72: Only Chrome, Edge & Opera do not allow to reassign the buffer yet.\n            if (value !== null) {\n                if (this._isBufferSet) {\n                    throw createInvalidStateError();\n                }\n                this._isBufferSet = true;\n            }\n        }\n        get loop() {\n            return this._nativeAudioBufferSourceNode.loop;\n        }\n        set loop(value) {\n            this._nativeAudioBufferSourceNode.loop = value;\n        }\n        get loopEnd() {\n            return this._nativeAudioBufferSourceNode.loopEnd;\n        }\n        set loopEnd(value) {\n            this._nativeAudioBufferSourceNode.loopEnd = value;\n        }\n        get loopStart() {\n            return this._nativeAudioBufferSourceNode.loopStart;\n        }\n        set loopStart(value) {\n            this._nativeAudioBufferSourceNode.loopStart = value;\n        }\n        get onended() {\n            return this._onended;\n        }\n        set onended(value) {\n            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n            this._nativeAudioBufferSourceNode.onended = wrappedListener;\n            const nativeOnEnded = this._nativeAudioBufferSourceNode.onended;\n            this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n        }\n        get playbackRate() {\n            return this._playbackRate;\n        }\n        start(when = 0, offset = 0, duration) {\n            this._nativeAudioBufferSourceNode.start(when, offset, duration);\n            if (this._audioBufferSourceNodeRenderer !== null) {\n                this._audioBufferSourceNodeRenderer.start = duration === undefined ? [when, offset] : [when, offset, duration];\n            }\n            else {\n                setInternalStateToActive(this);\n                const resetInternalStateToPassive = () => {\n                    this._nativeAudioBufferSourceNode.removeEventListener('ended', resetInternalStateToPassive);\n                    // @todo Determine a meaningful delay instead of just using one second.\n                    setTimeout(() => setInternalStateToPassive(this), 1000);\n                };\n                this._nativeAudioBufferSourceNode.addEventListener('ended', resetInternalStateToPassive);\n            }\n        }\n        stop(when = 0) {\n            this._nativeAudioBufferSourceNode.stop(when);\n            if (this._audioBufferSourceNodeRenderer !== null) {\n                this._audioBufferSourceNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n//# sourceMappingURL=audio-buffer-source-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}