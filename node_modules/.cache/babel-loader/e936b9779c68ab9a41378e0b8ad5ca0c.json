{"ast":null,"code":"import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport var createNativeConvolverNodeFakerFactory = function createNativeConvolverNodeFakerFactory(createNativeAudioNode, createNativeGainNode, monitorConnections) {\n  return function (nativeContext, _ref) {\n    var buffer = _ref.buffer,\n        channelCount = _ref.channelCount,\n        channelCountMode = _ref.channelCountMode,\n        channelInterpretation = _ref.channelInterpretation,\n        disableNormalization = _ref.disableNormalization;\n    var convolverNode = createNativeAudioNode(nativeContext, function (ntvCntxt) {\n      return ntvCntxt.createConvolver();\n    });\n    assignNativeAudioNodeOptions(convolverNode, {\n      // Bug #166: Opera does not allow yet to set the channelCount to 1.\n      channelCount: Math.max(channelCount, 2),\n      // Bug #167: Opera does not allow yet to set the channelCountMode to 'explicit'.\n      channelCountMode: channelCountMode === 'max' ? channelCountMode : 'clamped-max',\n      channelInterpretation: channelInterpretation\n    });\n    var gainNode = createNativeGainNode(nativeContext, {\n      channelCount: channelCount,\n      channelCountMode: channelCountMode,\n      channelInterpretation: channelInterpretation,\n      gain: 1\n    });\n    var nativeConvolverNodeFaker = {\n      get buffer() {\n        return convolverNode.buffer;\n      },\n\n      set buffer(value) {\n        convolverNode.buffer = value;\n      },\n\n      get bufferSize() {\n        return undefined;\n      },\n\n      get channelCount() {\n        return gainNode.channelCount;\n      },\n\n      set channelCount(value) {\n        // Bug #166: Opera does not allow yet to set the channelCount to 1.\n        if (value > 2) {\n          convolverNode.channelCount = value;\n        }\n\n        gainNode.channelCount = value;\n      },\n\n      get channelCountMode() {\n        return gainNode.channelCountMode;\n      },\n\n      set channelCountMode(value) {\n        // Bug #167: Opera does not allow yet to set the channelCountMode to 'explicit'.\n        if (value === 'max') {\n          convolverNode.channelCountMode = value;\n        }\n\n        gainNode.channelCountMode = value;\n      },\n\n      get channelInterpretation() {\n        return convolverNode.channelInterpretation;\n      },\n\n      set channelInterpretation(value) {\n        convolverNode.channelInterpretation = value;\n        gainNode.channelInterpretation = value;\n      },\n\n      get context() {\n        return convolverNode.context;\n      },\n\n      get inputs() {\n        return [convolverNode];\n      },\n\n      get numberOfInputs() {\n        return convolverNode.numberOfInputs;\n      },\n\n      get numberOfOutputs() {\n        return convolverNode.numberOfOutputs;\n      },\n\n      get normalize() {\n        return convolverNode.normalize;\n      },\n\n      set normalize(value) {\n        convolverNode.normalize = value;\n      },\n\n      addEventListener: function addEventListener() {\n        return convolverNode.addEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      },\n      dispatchEvent: function dispatchEvent() {\n        return convolverNode.dispatchEvent(arguments.length <= 0 ? undefined : arguments[0]);\n      },\n      removeEventListener: function removeEventListener() {\n        return convolverNode.removeEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      }\n    }; // The normalize property needs to be set before setting the buffer.\n\n    if (disableNormalization === nativeConvolverNodeFaker.normalize) {\n      nativeConvolverNodeFaker.normalize = !disableNormalization;\n    }\n\n    if (buffer !== nativeConvolverNodeFaker.buffer) {\n      nativeConvolverNodeFaker.buffer = buffer;\n    }\n\n    var whenConnected = function whenConnected() {\n      return convolverNode.connect(gainNode);\n    };\n\n    var whenDisconnected = function whenDisconnected() {\n      return convolverNode.disconnect(gainNode);\n    };\n\n    return monitorConnections(interceptConnections(nativeConvolverNodeFaker, gainNode), whenConnected, whenDisconnected);\n  };\n};","map":{"version":3,"sources":["../../../src/factories/native-convolver-node-faker-factory.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeConvolverNodeFakerFactory = (createNativeAudioNode, createNativeGainNode, monitorConnections) => {\n    return (nativeContext, { buffer, channelCount, channelCountMode, channelInterpretation, disableNormalization }) => {\n        const convolverNode = createNativeAudioNode(nativeContext, (ntvCntxt) => ntvCntxt.createConvolver());\n        assignNativeAudioNodeOptions(convolverNode, {\n            // Bug #166: Opera does not allow yet to set the channelCount to 1.\n            channelCount: Math.max(channelCount, 2),\n            // Bug #167: Opera does not allow yet to set the channelCountMode to 'explicit'.\n            channelCountMode: channelCountMode === 'max' ? channelCountMode : 'clamped-max',\n            channelInterpretation\n        });\n        const gainNode = createNativeGainNode(nativeContext, { channelCount, channelCountMode, channelInterpretation, gain: 1 });\n        const nativeConvolverNodeFaker = {\n            get buffer() {\n                return convolverNode.buffer;\n            },\n            set buffer(value) {\n                convolverNode.buffer = value;\n            },\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return gainNode.channelCount;\n            },\n            set channelCount(value) {\n                // Bug #166: Opera does not allow yet to set the channelCount to 1.\n                if (value > 2) {\n                    convolverNode.channelCount = value;\n                }\n                gainNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return gainNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                // Bug #167: Opera does not allow yet to set the channelCountMode to 'explicit'.\n                if (value === 'max') {\n                    convolverNode.channelCountMode = value;\n                }\n                gainNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return convolverNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                convolverNode.channelInterpretation = value;\n                gainNode.channelInterpretation = value;\n            },\n            get context() {\n                return convolverNode.context;\n            },\n            get inputs() {\n                return [convolverNode];\n            },\n            get numberOfInputs() {\n                return convolverNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return convolverNode.numberOfOutputs;\n            },\n            get normalize() {\n                return convolverNode.normalize;\n            },\n            set normalize(value) {\n                convolverNode.normalize = value;\n            },\n            addEventListener(...args) {\n                return convolverNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return convolverNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return convolverNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        // The normalize property needs to be set before setting the buffer.\n        if (disableNormalization === nativeConvolverNodeFaker.normalize) {\n            nativeConvolverNodeFaker.normalize = !disableNormalization;\n        }\n        if (buffer !== nativeConvolverNodeFaker.buffer) {\n            nativeConvolverNodeFaker.buffer = buffer;\n        }\n        const whenConnected = () => convolverNode.connect(gainNode);\n        const whenDisconnected = () => convolverNode.disconnect(gainNode);\n        return monitorConnections(interceptConnections(nativeConvolverNodeFaker, gainNode), whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=native-convolver-node-faker-factory.js.map"]},"metadata":{},"sourceType":"module"}