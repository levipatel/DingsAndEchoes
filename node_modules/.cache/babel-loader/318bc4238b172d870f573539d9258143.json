{"ast":null,"code":"var _jsxFileName = \"/Users/levipatel/Github/DingsAndEchoes/src/Canvas.js\";\n// based off https://medium.com/@pdx.lucasm/canvas-with-react-js-32e133c05258\nimport React, { useState, useRef, useEffect, Component } from 'react';\nimport { Sampler } from \"tone\";\nimport A1 from \"./audio/ding-1.wav\";\nimport B1 from \"./audio/shaker-1.wav\";\n\nconst Canvas = props => {\n  const canvasRef = useRef(null); // TODO: move out of component, should be passed as a prop\n\n  const draw = ctx => {\n    ctx.fillStyle = '#000000';\n    ctx.beginPath();\n    ctx.arc(50, 100, 20, 0, 2 * Math.PI);\n    ctx.fill();\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d'); //Our draw come here\n\n    draw(context);\n  }, [draw]); //Set up tone sampler\n\n  const [isLoaded, setLoaded] = useState(false);\n  const sampler = useRef(null);\n  useEffect(() => {\n    sampler.current = new Sampler({\n      A1,\n      B1\n    }, {\n      onload: () => {\n        setLoaded(true);\n      }\n    }).toMaster();\n  }, []); //Function to make a tone\n\n  function playTone(note) {\n    if (isLoaded) {\n      sampler.current.triggerAttack(note);\n    }\n  } //Periodically call the two tones\n\n\n  setInterval(() => playTone(\"A1\"), 3000);\n  setInterval(() => playTone(\"B1\"), 5000);\n  return /*#__PURE__*/React.createElement(\"canvas\", Object.assign({\n    ref: canvasRef\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 10\n    }\n  }));\n};\n\nexport default Canvas;","map":{"version":3,"sources":["/Users/levipatel/Github/DingsAndEchoes/src/Canvas.js"],"names":["React","useState","useRef","useEffect","Component","Sampler","A1","B1","Canvas","props","canvasRef","draw","ctx","fillStyle","beginPath","arc","Math","PI","fill","canvas","current","context","getContext","isLoaded","setLoaded","sampler","onload","toMaster","playTone","note","triggerAttack","setInterval"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,EAA6CC,SAA7C,QAA8D,OAA9D;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,OAAOC,EAAP,MAAe,oBAAf;AACA,OAAOC,EAAP,MAAe,sBAAf;;AAEA,MAAMC,MAAM,GAAGC,KAAK,IAAI;AAEtB,QAAMC,SAAS,GAAGR,MAAM,CAAC,IAAD,CAAxB,CAFsB,CAItB;;AACA,QAAMS,IAAI,GAAGC,GAAG,IAAI;AAClBA,IAAAA,GAAG,CAACC,SAAJ,GAAgB,SAAhB;AACAD,IAAAA,GAAG,CAACE,SAAJ;AACAF,IAAAA,GAAG,CAACG,GAAJ,CAAQ,EAAR,EAAY,GAAZ,EAAiB,EAAjB,EAAqB,CAArB,EAAwB,IAAEC,IAAI,CAACC,EAA/B;AACAL,IAAAA,GAAG,CAACM,IAAJ;AACD,GALD;;AAOAf,EAAAA,SAAS,CAAC,MAAM;AAEd,UAAMgB,MAAM,GAAGT,SAAS,CAACU,OAAzB;AACA,UAAMC,OAAO,GAAGF,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAhB,CAHc,CAKd;;AACAX,IAAAA,IAAI,CAACU,OAAD,CAAJ;AACD,GAPQ,EAON,CAACV,IAAD,CAPM,CAAT,CAZsB,CAqBtB;;AACA,QAAM,CAACY,QAAD,EAAWC,SAAX,IAAwBvB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAMwB,OAAO,GAAGvB,MAAM,CAAC,IAAD,CAAtB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdsB,IAAAA,OAAO,CAACL,OAAR,GAAkB,IAAIf,OAAJ,CAChB;AAAEC,MAAAA,EAAF;AAAMC,MAAAA;AAAN,KADgB,EAEhB;AACEmB,MAAAA,MAAM,EAAE,MAAM;AACZF,QAAAA,SAAS,CAAC,IAAD,CAAT;AACD;AAHH,KAFgB,EAOhBG,QAPgB,EAAlB;AAQD,GATQ,EASN,EATM,CAAT,CAzBsB,CAoCtB;;AACA,WAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,QAAIN,QAAJ,EAAa;AACXE,MAAAA,OAAO,CAACL,OAAR,CAAgBU,aAAhB,CAA8BD,IAA9B;AACD;AACF,GAzCqB,CA2CtB;;;AACAE,EAAAA,WAAW,CAAE,MAAMH,QAAQ,CAAC,IAAD,CAAhB,EAAwB,IAAxB,CAAX;AACAG,EAAAA,WAAW,CAAE,MAAMH,QAAQ,CAAC,IAAD,CAAhB,EAAwB,IAAxB,CAAX;AAEA,sBAAO;AAAQ,IAAA,GAAG,EAAElB;AAAb,KAA4BD,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAhDD;;AAkDA,eAAeD,MAAf","sourcesContent":["// based off https://medium.com/@pdx.lucasm/canvas-with-react-js-32e133c05258\nimport React, { useState, useRef, useEffect, Component } from 'react';\nimport { Sampler } from \"tone\";\nimport A1 from \"./audio/ding-1.wav\";\nimport B1 from \"./audio/shaker-1.wav\";\n\nconst Canvas = props => {\n  \n  const canvasRef = useRef(null)\n  \n  // TODO: move out of component, should be passed as a prop\n  const draw = ctx => {\n    ctx.fillStyle = '#000000'\n    ctx.beginPath()\n    ctx.arc(50, 100, 20, 0, 2*Math.PI)\n    ctx.fill()\n  }\n  \n  useEffect(() => {\n    \n    const canvas = canvasRef.current\n    const context = canvas.getContext('2d')\n    \n    //Our draw come here\n    draw(context)\n  }, [draw])\n\n  //Set up tone sampler\n  const [isLoaded, setLoaded] = useState(false);\n  const sampler = useRef(null);\n\n  useEffect(() => {\n    sampler.current = new Sampler(\n      { A1, B1 },\n      {\n        onload: () => {\n          setLoaded(true);\n        }\n      }\n    ).toMaster();\n  }, []);\n\n  //Function to make a tone\n  function playTone(note) {\n    if (isLoaded){\n      sampler.current.triggerAttack(note);\n    }\n  }\n\n  //Periodically call the two tones\n  setInterval( () => playTone(\"A1\"), 3000);\n  setInterval( () => playTone(\"B1\"), 5000);\n\n  return <canvas ref={canvasRef} {...props}/>\n}\n\nexport default Canvas"]},"metadata":{},"sourceType":"module"}