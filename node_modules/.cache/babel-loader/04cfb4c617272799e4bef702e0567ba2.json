{"ast":null,"code":"import { BACKUP_NATIVE_CONTEXT_STORE } from '../globals';\nexport const createGetBackupNativeContext = (isNativeOfflineAudioContext, nativeAudioContextConstructor, nativeOfflineAudioContextConstructor) => {\n  return nativeContext => {\n    /*\n     * Bug #50: Only Edge does currently not allow to create AudioNodes on a closed context yet which is why there needs to be no\n     * backupNativeContext in that case.\n     */\n    if (nativeContext.state === 'closed' && nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name !== 'webkitAudioContext') {\n      if (isNativeOfflineAudioContext(nativeContext)) {\n        const backupNativeContext = BACKUP_NATIVE_CONTEXT_STORE.get(nativeContext);\n\n        if (backupNativeContext !== undefined) {\n          return backupNativeContext;\n        }\n\n        if (nativeOfflineAudioContextConstructor !== null) {\n          // @todo Copy the attached AudioWorkletProcessors and other settings.\n          const bckpNtveCntxt = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n          BACKUP_NATIVE_CONTEXT_STORE.set(nativeContext, bckpNtveCntxt);\n          return bckpNtveCntxt;\n        }\n      } else {\n        const backupNativeContext = BACKUP_NATIVE_CONTEXT_STORE.get(nativeContext);\n\n        if (backupNativeContext !== undefined) {\n          return backupNativeContext;\n        } // @todo Copy the attached AudioWorkletProcessors and other settings.\n\n\n        const bckpNtveCntxt = new nativeAudioContextConstructor();\n        BACKUP_NATIVE_CONTEXT_STORE.set(nativeContext, bckpNtveCntxt);\n        return bckpNtveCntxt;\n      }\n    }\n\n    return null;\n  };\n};","map":{"version":3,"sources":["../../../src/factories/get-backup-native-context.ts"],"names":[],"mappings":"AAAA,SAAS,2BAAT,QAA4C,YAA5C;AAGA,OAAO,MAAM,4BAA4B,GAAmC,CACxE,2BADwE,EAExE,6BAFwE,EAGxE,oCAHwE,KAIxE;AACA,SAAoE,aAA7D,IAA2F;AAC9F;;;;AAIA,QACI,aAAa,CAAC,KAAd,KAAwB,QAAxB,IACA,6BAA6B,KAAK,IADlC,IAEA,6BAA6B,CAAC,IAA9B,KAAuC,oBAH3C,EAIE;AACE,UAAI,2BAA2B,CAAC,aAAD,CAA/B,EAAgD;AAC5C,cAAM,mBAAmB,GAAG,2BAA2B,CAAC,GAA5B,CAAgC,aAAhC,CAA5B;;AAEA,YAAI,mBAAmB,KAAK,SAA5B,EAAuC;AACnC,iBAAU,mBAAV;AACH;;AAED,YAAI,oCAAoC,KAAK,IAA7C,EAAmD;AAC/C;AACA,gBAAM,aAAa,GAAG,IAAI,oCAAJ,CAAyC,CAAzC,EAA4C,CAA5C,EAA+C,KAA/C,CAAtB;AAEA,UAAA,2BAA2B,CAAC,GAA5B,CAAgC,aAAhC,EAA+C,aAA/C;AAEA,iBAAU,aAAV;AACH;AACJ,OAfD,MAeO;AACH,cAAM,mBAAmB,GAAG,2BAA2B,CAAC,GAA5B,CAAgC,aAAhC,CAA5B;;AAEA,YAAI,mBAAmB,KAAK,SAA5B,EAAuC;AACnC,iBAAU,mBAAV;AACH,SALE,CAOH;;;AACA,cAAM,aAAa,GAAG,IAAI,6BAAJ,EAAtB;AAEA,QAAA,2BAA2B,CAAC,GAA5B,CAAgC,aAAhC,EAA+C,aAA/C;AAEA,eAAU,aAAV;AACH;AACJ;;AAED,WAAO,IAAP;AACH,GA1CD;AA2CH,CAhDM","sourceRoot":"","sourcesContent":["import { BACKUP_NATIVE_CONTEXT_STORE } from '../globals';\nexport const createGetBackupNativeContext = (isNativeOfflineAudioContext, nativeAudioContextConstructor, nativeOfflineAudioContextConstructor) => {\n    return (nativeContext) => {\n        /*\n         * Bug #50: Only Edge does currently not allow to create AudioNodes on a closed context yet which is why there needs to be no\n         * backupNativeContext in that case.\n         */\n        if (nativeContext.state === 'closed' &&\n            nativeAudioContextConstructor !== null &&\n            nativeAudioContextConstructor.name !== 'webkitAudioContext') {\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                const backupNativeContext = BACKUP_NATIVE_CONTEXT_STORE.get(nativeContext);\n                if (backupNativeContext !== undefined) {\n                    return backupNativeContext;\n                }\n                if (nativeOfflineAudioContextConstructor !== null) {\n                    // @todo Copy the attached AudioWorkletProcessors and other settings.\n                    const bckpNtveCntxt = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n                    BACKUP_NATIVE_CONTEXT_STORE.set(nativeContext, bckpNtveCntxt);\n                    return bckpNtveCntxt;\n                }\n            }\n            else {\n                const backupNativeContext = BACKUP_NATIVE_CONTEXT_STORE.get(nativeContext);\n                if (backupNativeContext !== undefined) {\n                    return backupNativeContext;\n                }\n                // @todo Copy the attached AudioWorkletProcessors and other settings.\n                const bckpNtveCntxt = new nativeAudioContextConstructor();\n                BACKUP_NATIVE_CONTEXT_STORE.set(nativeContext, bckpNtveCntxt);\n                return bckpNtveCntxt;\n            }\n        }\n        return null;\n    };\n};\n//# sourceMappingURL=get-backup-native-context.js.map"]},"metadata":{},"sourceType":"module"}