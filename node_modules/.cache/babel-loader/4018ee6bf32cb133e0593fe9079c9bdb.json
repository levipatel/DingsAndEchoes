{"ast":null,"code":"import _classCallCheck from \"/Users/levipatel/Github/DingsAndEchoes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"/Users/levipatel/Github/DingsAndEchoes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/levipatel/Github/DingsAndEchoes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _objectSpread from \"/Users/levipatel/Github/DingsAndEchoes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar DEFAULT_OPTIONS = {\n  channelCount: 6,\n  channelCountMode: 'explicit',\n  channelInterpretation: 'discrete',\n  numberOfOutputs: 6\n};\n\nvar sanitizedOptions = function sanitizedOptions(options) {\n  return _objectSpread(_objectSpread({}, options), {}, {\n    channelCount: options.numberOfOutputs\n  });\n};\n\nexport var createChannelSplitterNodeConstructor = function createChannelSplitterNodeConstructor(audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(ChannelSplitterNode, _audioNodeConstructor);\n\n    var _super = _createSuper(ChannelSplitterNode);\n\n    function ChannelSplitterNode(context) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_OPTIONS;\n\n      _classCallCheck(this, ChannelSplitterNode);\n\n      var nativeContext = getNativeContext(context);\n      var mergedOptions = sanitizedOptions(_objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options));\n      var nativeChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, mergedOptions);\n      var channelSplitterNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createChannelSplitterNodeRenderer() : null;\n      return _super.call(this, context, false, nativeChannelSplitterNode, channelSplitterNodeRenderer);\n    }\n\n    return ChannelSplitterNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"sources":["../../../src/factories/channel-splitter-node-constructor.ts"],"names":[],"mappings":";;;;AAGA,IAAM,eAAe,GAAG;AACpB,EAAA,YAAY,EAAE,CADM;AAEpB,EAAA,gBAAgB,EAAE,UAFE;AAGpB,EAAA,qBAAqB,EAAE,UAHH;AAIpB,EAAA,eAAe,EAAE;AAJG,CAAxB;;AAOA,IAAM,gBAAgB,GAAG,SAAnB,gBAAmB,CAAC,OAAD,EAAqC;AAC1D,yCAAY,OAAZ;AAAqB,IAAA,YAAY,EAAE,OAAO,CAAC;AAA3C;AACH,CAFD;;AAIA,OAAO,IAAM,oCAAoC,GAA2C,SAA/E,oCAA+E,CACxF,oBADwF,EAExF,iCAFwF,EAGxF,+BAHwF,EAIxF,gBAJwF,EAKxF,2BALwF,EAMxF;AACA;AAAA;;AAAA;;AACI,iCAAY,OAAZ,EAAmF;AAAA,UAA3D,OAA2D,uEAAf,eAAe;;AAAA;;AAC/E,UAAM,aAAa,GAAG,gBAAgB,CAAC,OAAD,CAAtC;AACA,UAAM,aAAa,GAAG,gBAAgB,iCAAM,eAAN,GAA0B,OAA1B,EAAtC;AACA,UAAM,yBAAyB,GAAG,+BAA+B,CAAC,aAAD,EAAgB,aAAhB,CAAjE;AACA,UAAM,2BAA2B,GAC5B,2BAA2B,CAAC,aAAD,CAA3B,GAA6C,iCAAiC,EAA9E,GAAmF,IADxF;AAJ+E,+BAQzE,OARyE,EAQhE,KARgE,EAQzD,yBARyD,EAQ9B,2BAR8B;AASlF;;AAVL;AAAA,IAA6D,oBAA7D;AAYH,CAnBM","sourceRoot":"","sourcesContent":["const DEFAULT_OPTIONS = {\n    channelCount: 6,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'discrete',\n    numberOfOutputs: 6\n};\nconst sanitizedOptions = (options) => {\n    return { ...options, channelCount: options.numberOfOutputs };\n};\nexport const createChannelSplitterNodeConstructor = (audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class ChannelSplitterNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = sanitizedOptions({ ...DEFAULT_OPTIONS, ...options });\n            const nativeChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, mergedOptions);\n            const channelSplitterNodeRenderer = ((isNativeOfflineAudioContext(nativeContext) ? createChannelSplitterNodeRenderer() : null));\n            super(context, false, nativeChannelSplitterNode, channelSplitterNodeRenderer);\n        }\n    };\n};\n//# sourceMappingURL=channel-splitter-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}