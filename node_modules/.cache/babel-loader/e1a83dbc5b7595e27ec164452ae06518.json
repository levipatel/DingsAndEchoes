{"ast":null,"code":"import _classCallCheck from \"/Users/levipatel/Github/DingsAndEchoes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/levipatel/Github/DingsAndEchoes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/levipatel/Github/DingsAndEchoes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/levipatel/Github/DingsAndEchoes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/levipatel/Github/DingsAndEchoes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _toConsumableArray from \"/Users/levipatel/Github/DingsAndEchoes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"/Users/levipatel/Github/DingsAndEchoes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _slicedToArray from \"/Users/levipatel/Github/DingsAndEchoes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { AUDIO_NODE_STORE, EVENT_LISTENERS } from '../globals';\nimport { isAudioNode } from '../guards/audio-node';\nimport { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nimport { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { connectNativeAudioNodeToNativeAudioNode } from '../helpers/connect-native-audio-node-to-native-audio-node';\nimport { deleteEventListenerOfAudioNode } from '../helpers/delete-event-listeners-of-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from '../helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from '../helpers/get-audio-param-connections';\nimport { getEventListenersOfAudioNode } from '../helpers/get-event-listeners-of-audio-node';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { getNativeAudioParam } from '../helpers/get-native-audio-param';\nimport { getValueForKey } from '../helpers/get-value-for-key';\nimport { insertElementInSet } from '../helpers/insert-element-in-set';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { isPartOfACycle } from '../helpers/is-part-of-a-cycle';\nimport { isPassiveAudioNode } from '../helpers/is-passive-audio-node';\nimport { pickElementFromSet } from '../helpers/pick-element-from-set';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassiveWhenNecessary } from '../helpers/set-internal-state-to-passive-when-necessary';\nimport { testAudioNodeDisconnectMethodSupport } from '../helpers/test-audio-node-disconnect-method-support';\nimport { visitEachAudioNodeOnce } from '../helpers/visit-each-audio-node-once';\nimport { wrapAudioNodeDisconnectMethod } from '../helpers/wrap-audio-node-disconnect-method';\n\nvar addActiveInputConnectionToAudioNode = function addActiveInputConnectionToAudioNode(activeInputs, source, _ref, ignoreDuplicates) {\n  var _ref2 = _slicedToArray(_ref, 3),\n      output = _ref2[0],\n      input = _ref2[1],\n      eventListener = _ref2[2];\n\n  insertElementInSet(activeInputs[input], [source, output, eventListener], function (activeInputConnection) {\n    return activeInputConnection[0] === source && activeInputConnection[1] === output;\n  }, ignoreDuplicates);\n};\n\nvar addActiveInputConnectionToAudioParam = function addActiveInputConnectionToAudioParam(activeInputs, source, _ref3, ignoreDuplicates) {\n  var _ref4 = _slicedToArray(_ref3, 2),\n      output = _ref4[0],\n      eventListener = _ref4[1];\n\n  insertElementInSet(activeInputs, [source, output, eventListener], function (activeInputConnection) {\n    return activeInputConnection[0] === source && activeInputConnection[1] === output;\n  }, ignoreDuplicates);\n};\n\nvar deleteActiveInputConnectionToAudioNode = function deleteActiveInputConnectionToAudioNode(activeInputs, source, output, input) {\n  return pickElementFromSet(activeInputs[input], function (activeInputConnection) {\n    return activeInputConnection[0] === source && activeInputConnection[1] === output;\n  });\n};\n\nvar deleteActiveInputConnectionToAudioParam = function deleteActiveInputConnectionToAudioParam(activeInputs, source, output) {\n  return pickElementFromSet(activeInputs, function (activeInputConnection) {\n    return activeInputConnection[0] === source && activeInputConnection[1] === output;\n  });\n};\n\nvar addPassiveInputConnectionToAudioNode = function addPassiveInputConnectionToAudioNode(passiveInputs, input, _ref5, ignoreDuplicates) {\n  var _ref6 = _slicedToArray(_ref5, 3),\n      source = _ref6[0],\n      output = _ref6[1],\n      eventListener = _ref6[2];\n\n  var passiveInputConnections = passiveInputs.get(source);\n\n  if (passiveInputConnections === undefined) {\n    passiveInputs.set(source, new Set([[output, input, eventListener]]));\n  } else {\n    insertElementInSet(passiveInputConnections, [output, input, eventListener], function (passiveInputConnection) {\n      return passiveInputConnection[0] === output && passiveInputConnection[1] === input;\n    }, ignoreDuplicates);\n  }\n};\n\nvar addPassiveInputConnectionToAudioParam = function addPassiveInputConnectionToAudioParam(passiveInputs, _ref7, ignoreDuplicates) {\n  var _ref8 = _slicedToArray(_ref7, 3),\n      source = _ref8[0],\n      output = _ref8[1],\n      eventListener = _ref8[2];\n\n  var passiveInputConnections = passiveInputs.get(source);\n\n  if (passiveInputConnections === undefined) {\n    passiveInputs.set(source, new Set([[output, eventListener]]));\n  } else {\n    insertElementInSet(passiveInputConnections, [output, eventListener], function (passiveInputConnection) {\n      return passiveInputConnection[0] === output;\n    }, ignoreDuplicates);\n  }\n};\n\nvar deletePassiveInputConnectionToAudioNode = function deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input) {\n  var passiveInputConnections = getValueForKey(passiveInputs, source);\n  var matchingConnection = pickElementFromSet(passiveInputConnections, function (passiveInputConnection) {\n    return passiveInputConnection[0] === output && passiveInputConnection[1] === input;\n  });\n\n  if (passiveInputConnections.size === 0) {\n    passiveInputs.delete(source);\n  }\n\n  return matchingConnection;\n};\n\nvar deletePassiveInputConnectionToAudioParam = function deletePassiveInputConnectionToAudioParam(passiveInputs, source, output) {\n  var passiveInputConnections = getValueForKey(passiveInputs, source);\n  var matchingConnection = pickElementFromSet(passiveInputConnections, function (passiveInputConnection) {\n    return passiveInputConnection[0] === output;\n  });\n\n  if (passiveInputConnections.size === 0) {\n    passiveInputs.delete(source);\n  }\n\n  return matchingConnection;\n};\n\nvar addConnectionToAudioNodeOfAudioContext = function addConnectionToAudioNodeOfAudioContext(source, destination, output, input) {\n  var _getAudioNodeConnecti = getAudioNodeConnections(destination),\n      activeInputs = _getAudioNodeConnecti.activeInputs,\n      passiveInputs = _getAudioNodeConnecti.passiveInputs;\n\n  var _getAudioNodeConnecti2 = getAudioNodeConnections(source),\n      outputs = _getAudioNodeConnecti2.outputs;\n\n  var eventListeners = getEventListenersOfAudioNode(source);\n\n  var eventListener = function eventListener(isActive) {\n    var nativeDestinationAudioNode = getNativeAudioNode(destination);\n    var nativeSourceAudioNode = getNativeAudioNode(source);\n\n    if (isActive) {\n      var partialConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n      addActiveInputConnectionToAudioNode(activeInputs, source, partialConnection, false);\n\n      if (!isPartOfACycle(source)) {\n        connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n      }\n\n      if (isPassiveAudioNode(destination)) {\n        setInternalStateToActive(destination);\n      }\n    } else {\n      var _partialConnection = deleteActiveInputConnectionToAudioNode(activeInputs, source, output, input);\n\n      addPassiveInputConnectionToAudioNode(passiveInputs, input, _partialConnection, false);\n\n      if (!isPartOfACycle(source)) {\n        disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n      }\n\n      if (isActiveAudioNode(destination)) {\n        setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n      }\n    }\n  };\n\n  if (insertElementInSet(outputs, [destination, output, input], function (outputConnection) {\n    return outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input;\n  }, true)) {\n    eventListeners.add(eventListener);\n\n    if (isActiveAudioNode(source)) {\n      addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, eventListener], true);\n    } else {\n      addPassiveInputConnectionToAudioNode(passiveInputs, input, [source, output, eventListener], true);\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nvar addConnectionToAudioNodeOfOfflineAudioContext = function addConnectionToAudioNodeOfOfflineAudioContext(source, destination, output, input) {\n  var _getAudioNodeConnecti3 = getAudioNodeConnections(source),\n      outputs = _getAudioNodeConnecti3.outputs;\n\n  if (insertElementInSet(outputs, [destination, output, input], function (outputConnection) {\n    return outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input;\n  }, true)) {\n    var _getAudioNodeConnecti4 = getAudioNodeConnections(destination),\n        activeInputs = _getAudioNodeConnecti4.activeInputs;\n\n    addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, null], true);\n    return true;\n  }\n\n  return false;\n};\n\nvar addConnectionToAudioParamOfAudioContext = function addConnectionToAudioParamOfAudioContext(source, destination, output) {\n  var _getAudioParamConnect = getAudioParamConnections(destination),\n      activeInputs = _getAudioParamConnect.activeInputs,\n      passiveInputs = _getAudioParamConnect.passiveInputs;\n\n  var _getAudioNodeConnecti5 = getAudioNodeConnections(source),\n      outputs = _getAudioNodeConnecti5.outputs;\n\n  var eventListeners = getEventListenersOfAudioNode(source);\n\n  var eventListener = function eventListener(isActive) {\n    var nativeAudioNode = getNativeAudioNode(source);\n    var nativeAudioParam = getNativeAudioParam(destination);\n\n    if (isActive) {\n      var partialConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n      addActiveInputConnectionToAudioParam(activeInputs, source, partialConnection, false);\n\n      if (!isPartOfACycle(source)) {\n        nativeAudioNode.connect(nativeAudioParam, output);\n      }\n    } else {\n      var _partialConnection2 = deleteActiveInputConnectionToAudioParam(activeInputs, source, output);\n\n      addPassiveInputConnectionToAudioParam(passiveInputs, _partialConnection2, false);\n\n      if (!isPartOfACycle(source)) {\n        nativeAudioNode.disconnect(nativeAudioParam, output);\n      }\n    }\n  };\n\n  if (insertElementInSet(outputs, [destination, output], function (outputConnection) {\n    return outputConnection[0] === destination && outputConnection[1] === output;\n  }, true)) {\n    eventListeners.add(eventListener);\n\n    if (isActiveAudioNode(source)) {\n      addActiveInputConnectionToAudioParam(activeInputs, source, [output, eventListener], true);\n    } else {\n      addPassiveInputConnectionToAudioParam(passiveInputs, [source, output, eventListener], true);\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nvar addConnectionToAudioParamOfOfflineAudioContext = function addConnectionToAudioParamOfOfflineAudioContext(source, destination, output) {\n  var _getAudioNodeConnecti6 = getAudioNodeConnections(source),\n      outputs = _getAudioNodeConnecti6.outputs;\n\n  if (insertElementInSet(outputs, [destination, output], function (outputConnection) {\n    return outputConnection[0] === destination && outputConnection[1] === output;\n  }, true)) {\n    var _getAudioParamConnect2 = getAudioParamConnections(destination),\n        activeInputs = _getAudioParamConnect2.activeInputs;\n\n    addActiveInputConnectionToAudioParam(activeInputs, source, [output, null], true);\n    return true;\n  }\n\n  return false;\n};\n\nvar deleteActiveInputConnection = function deleteActiveInputConnection(activeInputConnections, source, output) {\n  var _iterator = _createForOfIteratorHelper(activeInputConnections),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var activeInputConnection = _step.value;\n\n      if (activeInputConnection[0] === source && activeInputConnection[1] === output) {\n        activeInputConnections.delete(activeInputConnection);\n        return activeInputConnection;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return null;\n};\n\nvar deleteInputConnectionOfAudioNode = function deleteInputConnectionOfAudioNode(source, destination, output, input) {\n  var _getAudioNodeConnecti7 = getAudioNodeConnections(destination),\n      activeInputs = _getAudioNodeConnecti7.activeInputs,\n      passiveInputs = _getAudioNodeConnecti7.passiveInputs;\n\n  var activeInputConnection = deleteActiveInputConnection(activeInputs[input], source, output);\n\n  if (activeInputConnection === null) {\n    var passiveInputConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n    return [passiveInputConnection[2], false];\n  }\n\n  return [activeInputConnection[2], true];\n};\n\nvar deleteInputConnectionOfAudioParam = function deleteInputConnectionOfAudioParam(source, destination, output) {\n  var _getAudioParamConnect3 = getAudioParamConnections(destination),\n      activeInputs = _getAudioParamConnect3.activeInputs,\n      passiveInputs = _getAudioParamConnect3.passiveInputs;\n\n  var activeInputConnection = deleteActiveInputConnection(activeInputs, source, output);\n\n  if (activeInputConnection === null) {\n    var passiveInputConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n    return [passiveInputConnection[1], false];\n  }\n\n  return [activeInputConnection[2], true];\n};\n\nvar deleteInputsOfAudioNode = function deleteInputsOfAudioNode(source, destination, output, input) {\n  var _deleteInputConnectio = deleteInputConnectionOfAudioNode(source, destination, output, input),\n      _deleteInputConnectio2 = _slicedToArray(_deleteInputConnectio, 2),\n      listener = _deleteInputConnectio2[0],\n      isActive = _deleteInputConnectio2[1];\n\n  if (listener !== null) {\n    deleteEventListenerOfAudioNode(source, listener);\n\n    if (isActive && !isPartOfACycle(source)) {\n      disconnectNativeAudioNodeFromNativeAudioNode(getNativeAudioNode(source), getNativeAudioNode(destination), output, input);\n    }\n  }\n\n  if (isActiveAudioNode(destination)) {\n    var _getAudioNodeConnecti8 = getAudioNodeConnections(destination),\n        activeInputs = _getAudioNodeConnecti8.activeInputs;\n\n    setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n  }\n};\n\nvar deleteInputsOfAudioParam = function deleteInputsOfAudioParam(source, destination, output) {\n  var _deleteInputConnectio3 = deleteInputConnectionOfAudioParam(source, destination, output),\n      _deleteInputConnectio4 = _slicedToArray(_deleteInputConnectio3, 2),\n      listener = _deleteInputConnectio4[0],\n      isActive = _deleteInputConnectio4[1];\n\n  if (listener !== null) {\n    deleteEventListenerOfAudioNode(source, listener);\n\n    if (isActive && !isPartOfACycle(source)) {\n      getNativeAudioNode(source).disconnect(getNativeAudioParam(destination), output);\n    }\n  }\n};\n\nvar deleteAnyConnection = function deleteAnyConnection(source) {\n  var audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n  var destinations = [];\n\n  var _iterator2 = _createForOfIteratorHelper(audioNodeConnectionsOfSource.outputs),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var outputConnection = _step2.value;\n\n      if (isAudioNodeOutputConnection(outputConnection)) {\n        deleteInputsOfAudioNode.apply(void 0, [source].concat(_toConsumableArray(outputConnection)));\n      } else {\n        deleteInputsOfAudioParam.apply(void 0, [source].concat(_toConsumableArray(outputConnection)));\n      }\n\n      destinations.push(outputConnection[0]);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  audioNodeConnectionsOfSource.outputs.clear();\n  return destinations;\n};\n\nvar deleteConnectionAtOutput = function deleteConnectionAtOutput(source, output) {\n  var audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n  var destinations = [];\n\n  var _iterator3 = _createForOfIteratorHelper(audioNodeConnectionsOfSource.outputs),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var outputConnection = _step3.value;\n\n      if (outputConnection[1] === output) {\n        if (isAudioNodeOutputConnection(outputConnection)) {\n          deleteInputsOfAudioNode.apply(void 0, [source].concat(_toConsumableArray(outputConnection)));\n        } else {\n          deleteInputsOfAudioParam.apply(void 0, [source].concat(_toConsumableArray(outputConnection)));\n        }\n\n        destinations.push(outputConnection[0]);\n        audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  return destinations;\n};\n\nvar deleteConnectionToDestination = function deleteConnectionToDestination(source, destination, output, input) {\n  var audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n  return Array.from(audioNodeConnectionsOfSource.outputs).filter(function (outputConnection) {\n    return outputConnection[0] === destination && (output === undefined || outputConnection[1] === output) && (input === undefined || outputConnection[2] === input);\n  }).map(function (outputConnection) {\n    if (isAudioNodeOutputConnection(outputConnection)) {\n      deleteInputsOfAudioNode.apply(void 0, [source].concat(_toConsumableArray(outputConnection)));\n    } else {\n      deleteInputsOfAudioParam.apply(void 0, [source].concat(_toConsumableArray(outputConnection)));\n    }\n\n    audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n    return outputConnection[0];\n  });\n};\n\nexport var createAudioNodeConstructor = function createAudioNodeConstructor(addAudioNodeConnections, auxiliaryGainNodeStore, cacheTestResult, createIncrementCycleCounter, createIndexSizeError, createInvalidAccessError, createNotSupportedError, decrementCycleCounter, detectCycles, eventTargetConstructor, getNativeContext, isNativeAudioContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext) {\n  return /*#__PURE__*/function (_eventTargetConstruct) {\n    _inherits(AudioNode, _eventTargetConstruct);\n\n    var _super = _createSuper(AudioNode);\n\n    function AudioNode(context, isActive, nativeAudioNode, audioNodeRenderer) {\n      var _this;\n\n      _classCallCheck(this, AudioNode);\n\n      _this = _super.call(this, nativeAudioNode);\n      _this._context = context;\n      _this._nativeAudioNode = nativeAudioNode;\n      var nativeContext = getNativeContext(context); // Bug #12: Safari does not support to disconnect a specific destination.\n\n      if (isNativeAudioContext(nativeContext) && true !== cacheTestResult(testAudioNodeDisconnectMethodSupport, function () {\n        return testAudioNodeDisconnectMethodSupport(nativeContext);\n      })) {\n        wrapAudioNodeDisconnectMethod(nativeAudioNode);\n      }\n\n      AUDIO_NODE_STORE.set(_assertThisInitialized(_this), nativeAudioNode);\n      EVENT_LISTENERS.set(_assertThisInitialized(_this), new Set());\n\n      if (isActive) {\n        setInternalStateToActive(_assertThisInitialized(_this));\n      }\n\n      addAudioNodeConnections(_assertThisInitialized(_this), audioNodeRenderer, nativeAudioNode);\n      return _this;\n    }\n\n    _createClass(AudioNode, [{\n      key: \"connect\",\n      // tslint:disable-next-line:invalid-void\n      value: function connect(destination) {\n        var output = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var input = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n        // Bug #174: Safari does expose a wrong numberOfOutputs for MediaStreamAudioDestinationNodes.\n        if (output < 0 || output >= this._nativeAudioNode.numberOfOutputs) {\n          throw createIndexSizeError();\n        }\n\n        var nativeContext = getNativeContext(this._context);\n        var isOffline = isNativeOfflineAudioContext(nativeContext);\n\n        if (isNativeAudioNode(destination) || isNativeAudioParam(destination)) {\n          throw createInvalidAccessError();\n        }\n\n        if (isAudioNode(destination)) {\n          var nativeDestinationAudioNode = getNativeAudioNode(destination);\n\n          try {\n            var connection = connectNativeAudioNodeToNativeAudioNode(this._nativeAudioNode, nativeDestinationAudioNode, output, input);\n\n            if (isOffline || isPassiveAudioNode(this)) {\n              var _this$_nativeAudioNod;\n\n              (_this$_nativeAudioNod = this._nativeAudioNode).disconnect.apply(_this$_nativeAudioNod, _toConsumableArray(connection));\n            } else if (isPassiveAudioNode(destination)) {\n              setInternalStateToActive(destination);\n            } // An AudioWorklet needs a connection because it otherwise may truncate the input array.\n            // @todo Count the number of connections which depend on this auxiliary GainNode to know when it can be removed again.\n\n\n            if (isAudioWorkletNode(destination)) {\n              var auxiliaryGainNodes = auxiliaryGainNodeStore.get(nativeDestinationAudioNode);\n\n              if (auxiliaryGainNodes === undefined) {\n                var nativeGainNode = nativeContext.createGain();\n                nativeGainNode.connect(connection[0], 0, connection[2]);\n                auxiliaryGainNodeStore.set(nativeDestinationAudioNode, new Map([[input, nativeGainNode]]));\n              } else if (auxiliaryGainNodes.get(input) === undefined) {\n                var _nativeGainNode = nativeContext.createGain();\n\n                _nativeGainNode.connect(connection[0], 0, connection[2]);\n\n                auxiliaryGainNodes.set(input, _nativeGainNode);\n              }\n            }\n          } catch (err) {\n            // Bug #41: Only Chrome, Firefox and Opera throw the correct exception by now.\n            if (err.code === 12) {\n              throw createInvalidAccessError();\n            }\n\n            throw err;\n          }\n\n          var isNewConnectionToAudioNode = isOffline ? addConnectionToAudioNodeOfOfflineAudioContext(this, destination, output, input) : addConnectionToAudioNodeOfAudioContext(this, destination, output, input); // Bug #164: Only Firefox detects cycles so far.\n\n          if (isNewConnectionToAudioNode) {\n            var cycles = detectCycles([this], destination);\n            visitEachAudioNodeOnce(cycles, createIncrementCycleCounter(isOffline));\n          }\n\n          return destination;\n        }\n\n        var nativeAudioParam = getNativeAudioParam(destination);\n        /*\n         * Bug #147 & #153: Safari does not support to connect an input signal to the playbackRate AudioParam of an\n         * AudioBufferSourceNode. This can't be easily detected and that's why the outdated name property is used here to identify\n         * Safari.\n         */\n\n        if (nativeAudioParam.name === 'playbackRate') {\n          throw createNotSupportedError();\n        }\n\n        try {\n          this._nativeAudioNode.connect(nativeAudioParam, output);\n\n          if (isOffline || isPassiveAudioNode(this)) {\n            this._nativeAudioNode.disconnect(nativeAudioParam, output);\n          }\n        } catch (err) {\n          // Bug #58: Only Firefox does throw an InvalidStateError yet.\n          if (err.code === 12) {\n            throw createInvalidAccessError();\n          }\n\n          throw err;\n        }\n\n        var isNewConnectionToAudioParam = isOffline ? addConnectionToAudioParamOfOfflineAudioContext(this, destination, output) : addConnectionToAudioParamOfAudioContext(this, destination, output); // Bug #164: Only Firefox detects cycles so far.\n\n        if (isNewConnectionToAudioParam) {\n          var _cycles = detectCycles([this], destination);\n\n          visitEachAudioNodeOnce(_cycles, createIncrementCycleCounter(isOffline));\n        }\n      }\n    }, {\n      key: \"disconnect\",\n      value: function disconnect(destinationOrOutput, output, input) {\n        var destinations;\n\n        if (destinationOrOutput === undefined) {\n          destinations = deleteAnyConnection(this);\n        } else if (typeof destinationOrOutput === 'number') {\n          if (destinationOrOutput < 0 || destinationOrOutput >= this.numberOfOutputs) {\n            throw createIndexSizeError();\n          }\n\n          destinations = deleteConnectionAtOutput(this, destinationOrOutput);\n        } else {\n          if (output !== undefined && (output < 0 || output >= this.numberOfOutputs)) {\n            throw createIndexSizeError();\n          }\n\n          if (isAudioNode(destinationOrOutput) && input !== undefined && (input < 0 || input >= destinationOrOutput.numberOfInputs)) {\n            throw createIndexSizeError();\n          }\n\n          destinations = deleteConnectionToDestination(this, destinationOrOutput, output, input);\n\n          if (destinations.length === 0) {\n            throw createInvalidAccessError();\n          }\n        } // Bug #164: Only Firefox detects cycles so far.\n\n\n        var _iterator4 = _createForOfIteratorHelper(destinations),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var destination = _step4.value;\n            var cycles = detectCycles([this], destination);\n            visitEachAudioNodeOnce(cycles, decrementCycleCounter);\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      }\n    }, {\n      key: \"channelCount\",\n      get: function get() {\n        return this._nativeAudioNode.channelCount;\n      },\n      set: function set(value) {\n        this._nativeAudioNode.channelCount = value;\n      }\n    }, {\n      key: \"channelCountMode\",\n      get: function get() {\n        return this._nativeAudioNode.channelCountMode;\n      },\n      set: function set(value) {\n        this._nativeAudioNode.channelCountMode = value;\n      }\n    }, {\n      key: \"channelInterpretation\",\n      get: function get() {\n        return this._nativeAudioNode.channelInterpretation;\n      },\n      set: function set(value) {\n        this._nativeAudioNode.channelInterpretation = value;\n      }\n    }, {\n      key: \"context\",\n      get: function get() {\n        return this._context;\n      }\n    }, {\n      key: \"numberOfInputs\",\n      get: function get() {\n        return this._nativeAudioNode.numberOfInputs;\n      }\n    }, {\n      key: \"numberOfOutputs\",\n      get: function get() {\n        return this._nativeAudioNode.numberOfOutputs;\n      }\n    }]);\n\n    return AudioNode;\n  }(eventTargetConstructor);\n};","map":{"version":3,"sources":["../../../src/factories/audio-node-constructor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { AUDIO_NODE_STORE, EVENT_LISTENERS } from '../globals';\nimport { isAudioNode } from '../guards/audio-node';\nimport { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nimport { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { connectNativeAudioNodeToNativeAudioNode } from '../helpers/connect-native-audio-node-to-native-audio-node';\nimport { deleteEventListenerOfAudioNode } from '../helpers/delete-event-listeners-of-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from '../helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from '../helpers/get-audio-param-connections';\nimport { getEventListenersOfAudioNode } from '../helpers/get-event-listeners-of-audio-node';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { getNativeAudioParam } from '../helpers/get-native-audio-param';\nimport { getValueForKey } from '../helpers/get-value-for-key';\nimport { insertElementInSet } from '../helpers/insert-element-in-set';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { isPartOfACycle } from '../helpers/is-part-of-a-cycle';\nimport { isPassiveAudioNode } from '../helpers/is-passive-audio-node';\nimport { pickElementFromSet } from '../helpers/pick-element-from-set';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassiveWhenNecessary } from '../helpers/set-internal-state-to-passive-when-necessary';\nimport { testAudioNodeDisconnectMethodSupport } from '../helpers/test-audio-node-disconnect-method-support';\nimport { visitEachAudioNodeOnce } from '../helpers/visit-each-audio-node-once';\nimport { wrapAudioNodeDisconnectMethod } from '../helpers/wrap-audio-node-disconnect-method';\nconst addActiveInputConnectionToAudioNode = (activeInputs, source, [output, input, eventListener], ignoreDuplicates) => {\n    insertElementInSet(activeInputs[input], [source, output, eventListener], (activeInputConnection) => activeInputConnection[0] === source && activeInputConnection[1] === output, ignoreDuplicates);\n};\nconst addActiveInputConnectionToAudioParam = (activeInputs, source, [output, eventListener], ignoreDuplicates) => {\n    insertElementInSet(activeInputs, [source, output, eventListener], (activeInputConnection) => activeInputConnection[0] === source && activeInputConnection[1] === output, ignoreDuplicates);\n};\nconst deleteActiveInputConnectionToAudioNode = (activeInputs, source, output, input) => {\n    return pickElementFromSet(activeInputs[input], (activeInputConnection) => activeInputConnection[0] === source && activeInputConnection[1] === output);\n};\nconst deleteActiveInputConnectionToAudioParam = (activeInputs, source, output) => {\n    return pickElementFromSet(activeInputs, (activeInputConnection) => activeInputConnection[0] === source && activeInputConnection[1] === output);\n};\nconst addPassiveInputConnectionToAudioNode = (passiveInputs, input, [source, output, eventListener], ignoreDuplicates) => {\n    const passiveInputConnections = passiveInputs.get(source);\n    if (passiveInputConnections === undefined) {\n        passiveInputs.set(source, new Set([[output, input, eventListener]]));\n    }\n    else {\n        insertElementInSet(passiveInputConnections, [output, input, eventListener], (passiveInputConnection) => passiveInputConnection[0] === output && passiveInputConnection[1] === input, ignoreDuplicates);\n    }\n};\nconst addPassiveInputConnectionToAudioParam = (passiveInputs, [source, output, eventListener], ignoreDuplicates) => {\n    const passiveInputConnections = passiveInputs.get(source);\n    if (passiveInputConnections === undefined) {\n        passiveInputs.set(source, new Set([[output, eventListener]]));\n    }\n    else {\n        insertElementInSet(passiveInputConnections, [output, eventListener], (passiveInputConnection) => passiveInputConnection[0] === output, ignoreDuplicates);\n    }\n};\nconst deletePassiveInputConnectionToAudioNode = (passiveInputs, source, output, input) => {\n    const passiveInputConnections = getValueForKey(passiveInputs, source);\n    const matchingConnection = pickElementFromSet(passiveInputConnections, (passiveInputConnection) => passiveInputConnection[0] === output && passiveInputConnection[1] === input);\n    if (passiveInputConnections.size === 0) {\n        passiveInputs.delete(source);\n    }\n    return matchingConnection;\n};\nconst deletePassiveInputConnectionToAudioParam = (passiveInputs, source, output) => {\n    const passiveInputConnections = getValueForKey(passiveInputs, source);\n    const matchingConnection = pickElementFromSet(passiveInputConnections, (passiveInputConnection) => passiveInputConnection[0] === output);\n    if (passiveInputConnections.size === 0) {\n        passiveInputs.delete(source);\n    }\n    return matchingConnection;\n};\nconst addConnectionToAudioNodeOfAudioContext = (source, destination, output, input) => {\n    const { activeInputs, passiveInputs } = getAudioNodeConnections(destination);\n    const { outputs } = getAudioNodeConnections(source);\n    const eventListeners = getEventListenersOfAudioNode(source);\n    const eventListener = ((isActive) => {\n        const nativeDestinationAudioNode = getNativeAudioNode(destination);\n        const nativeSourceAudioNode = getNativeAudioNode(source);\n        if (isActive) {\n            const partialConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n            addActiveInputConnectionToAudioNode(activeInputs, source, partialConnection, false);\n            if (!isPartOfACycle(source)) {\n                connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n            }\n            if (isPassiveAudioNode(destination)) {\n                setInternalStateToActive(destination);\n            }\n        }\n        else {\n            const partialConnection = deleteActiveInputConnectionToAudioNode(activeInputs, source, output, input);\n            addPassiveInputConnectionToAudioNode(passiveInputs, input, partialConnection, false);\n            if (!isPartOfACycle(source)) {\n                disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n            }\n            if (isActiveAudioNode(destination)) {\n                setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n            }\n        }\n    });\n    if (insertElementInSet(outputs, [destination, output, input], (outputConnection) => outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input, true)) {\n        eventListeners.add(eventListener);\n        if (isActiveAudioNode(source)) {\n            addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, eventListener], true);\n        }\n        else {\n            addPassiveInputConnectionToAudioNode(passiveInputs, input, [source, output, eventListener], true);\n        }\n        return true;\n    }\n    return false;\n};\nconst addConnectionToAudioNodeOfOfflineAudioContext = (source, destination, output, input) => {\n    const { outputs } = getAudioNodeConnections(source);\n    if (insertElementInSet(outputs, [destination, output, input], (outputConnection) => outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input, true)) {\n        const { activeInputs } = getAudioNodeConnections(destination);\n        addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, null], true);\n        return true;\n    }\n    return false;\n};\nconst addConnectionToAudioParamOfAudioContext = (source, destination, output) => {\n    const { activeInputs, passiveInputs } = getAudioParamConnections(destination);\n    const { outputs } = getAudioNodeConnections(source);\n    const eventListeners = getEventListenersOfAudioNode(source);\n    const eventListener = ((isActive) => {\n        const nativeAudioNode = getNativeAudioNode(source);\n        const nativeAudioParam = getNativeAudioParam(destination);\n        if (isActive) {\n            const partialConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n            addActiveInputConnectionToAudioParam(activeInputs, source, partialConnection, false);\n            if (!isPartOfACycle(source)) {\n                nativeAudioNode.connect(nativeAudioParam, output);\n            }\n        }\n        else {\n            const partialConnection = deleteActiveInputConnectionToAudioParam(activeInputs, source, output);\n            addPassiveInputConnectionToAudioParam(passiveInputs, partialConnection, false);\n            if (!isPartOfACycle(source)) {\n                nativeAudioNode.disconnect(nativeAudioParam, output);\n            }\n        }\n    });\n    if (insertElementInSet(outputs, [destination, output], (outputConnection) => outputConnection[0] === destination && outputConnection[1] === output, true)) {\n        eventListeners.add(eventListener);\n        if (isActiveAudioNode(source)) {\n            addActiveInputConnectionToAudioParam(activeInputs, source, [output, eventListener], true);\n        }\n        else {\n            addPassiveInputConnectionToAudioParam(passiveInputs, [source, output, eventListener], true);\n        }\n        return true;\n    }\n    return false;\n};\nconst addConnectionToAudioParamOfOfflineAudioContext = (source, destination, output) => {\n    const { outputs } = getAudioNodeConnections(source);\n    if (insertElementInSet(outputs, [destination, output], (outputConnection) => outputConnection[0] === destination && outputConnection[1] === output, true)) {\n        const { activeInputs } = getAudioParamConnections(destination);\n        addActiveInputConnectionToAudioParam(activeInputs, source, [output, null], true);\n        return true;\n    }\n    return false;\n};\nconst deleteActiveInputConnection = (activeInputConnections, source, output) => {\n    for (const activeInputConnection of activeInputConnections) {\n        if (activeInputConnection[0] === source && activeInputConnection[1] === output) {\n            activeInputConnections.delete(activeInputConnection);\n            return activeInputConnection;\n        }\n    }\n    return null;\n};\nconst deleteInputConnectionOfAudioNode = (source, destination, output, input) => {\n    const { activeInputs, passiveInputs } = getAudioNodeConnections(destination);\n    const activeInputConnection = deleteActiveInputConnection(activeInputs[input], source, output);\n    if (activeInputConnection === null) {\n        const passiveInputConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n        return [passiveInputConnection[2], false];\n    }\n    return [activeInputConnection[2], true];\n};\nconst deleteInputConnectionOfAudioParam = (source, destination, output) => {\n    const { activeInputs, passiveInputs } = getAudioParamConnections(destination);\n    const activeInputConnection = deleteActiveInputConnection(activeInputs, source, output);\n    if (activeInputConnection === null) {\n        const passiveInputConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n        return [passiveInputConnection[1], false];\n    }\n    return [activeInputConnection[2], true];\n};\nconst deleteInputsOfAudioNode = (source, destination, output, input) => {\n    const [listener, isActive] = deleteInputConnectionOfAudioNode(source, destination, output, input);\n    if (listener !== null) {\n        deleteEventListenerOfAudioNode(source, listener);\n        if (isActive && !isPartOfACycle(source)) {\n            disconnectNativeAudioNodeFromNativeAudioNode(getNativeAudioNode(source), getNativeAudioNode(destination), output, input);\n        }\n    }\n    if (isActiveAudioNode(destination)) {\n        const { activeInputs } = getAudioNodeConnections(destination);\n        setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n    }\n};\nconst deleteInputsOfAudioParam = (source, destination, output) => {\n    const [listener, isActive] = deleteInputConnectionOfAudioParam(source, destination, output);\n    if (listener !== null) {\n        deleteEventListenerOfAudioNode(source, listener);\n        if (isActive && !isPartOfACycle(source)) {\n            getNativeAudioNode(source).disconnect(getNativeAudioParam(destination), output);\n        }\n    }\n};\nconst deleteAnyConnection = (source) => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n    const destinations = [];\n    for (const outputConnection of audioNodeConnectionsOfSource.outputs) {\n        if (isAudioNodeOutputConnection(outputConnection)) {\n            deleteInputsOfAudioNode(source, ...outputConnection);\n        }\n        else {\n            deleteInputsOfAudioParam(source, ...outputConnection);\n        }\n        destinations.push(outputConnection[0]);\n    }\n    audioNodeConnectionsOfSource.outputs.clear();\n    return destinations;\n};\nconst deleteConnectionAtOutput = (source, output) => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n    const destinations = [];\n    for (const outputConnection of audioNodeConnectionsOfSource.outputs) {\n        if (outputConnection[1] === output) {\n            if (isAudioNodeOutputConnection(outputConnection)) {\n                deleteInputsOfAudioNode(source, ...outputConnection);\n            }\n            else {\n                deleteInputsOfAudioParam(source, ...outputConnection);\n            }\n            destinations.push(outputConnection[0]);\n            audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n        }\n    }\n    return destinations;\n};\nconst deleteConnectionToDestination = (source, destination, output, input) => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n    return Array.from(audioNodeConnectionsOfSource.outputs)\n        .filter((outputConnection) => outputConnection[0] === destination &&\n        (output === undefined || outputConnection[1] === output) &&\n        (input === undefined || outputConnection[2] === input))\n        .map((outputConnection) => {\n        if (isAudioNodeOutputConnection(outputConnection)) {\n            deleteInputsOfAudioNode(source, ...outputConnection);\n        }\n        else {\n            deleteInputsOfAudioParam(source, ...outputConnection);\n        }\n        audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n        return outputConnection[0];\n    });\n};\nexport const createAudioNodeConstructor = (addAudioNodeConnections, auxiliaryGainNodeStore, cacheTestResult, createIncrementCycleCounter, createIndexSizeError, createInvalidAccessError, createNotSupportedError, decrementCycleCounter, detectCycles, eventTargetConstructor, getNativeContext, isNativeAudioContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext) => {\n    return class AudioNode extends eventTargetConstructor {\n        constructor(context, isActive, nativeAudioNode, audioNodeRenderer) {\n            super(nativeAudioNode);\n            this._context = context;\n            this._nativeAudioNode = nativeAudioNode;\n            const nativeContext = getNativeContext(context);\n            // Bug #12: Safari does not support to disconnect a specific destination.\n            if (isNativeAudioContext(nativeContext) &&\n                true !==\n                    cacheTestResult(testAudioNodeDisconnectMethodSupport, () => {\n                        return testAudioNodeDisconnectMethodSupport(nativeContext);\n                    })) {\n                wrapAudioNodeDisconnectMethod(nativeAudioNode);\n            }\n            AUDIO_NODE_STORE.set(this, nativeAudioNode);\n            EVENT_LISTENERS.set(this, new Set());\n            if (isActive) {\n                setInternalStateToActive(this);\n            }\n            addAudioNodeConnections(this, audioNodeRenderer, nativeAudioNode);\n        }\n        get channelCount() {\n            return this._nativeAudioNode.channelCount;\n        }\n        set channelCount(value) {\n            this._nativeAudioNode.channelCount = value;\n        }\n        get channelCountMode() {\n            return this._nativeAudioNode.channelCountMode;\n        }\n        set channelCountMode(value) {\n            this._nativeAudioNode.channelCountMode = value;\n        }\n        get channelInterpretation() {\n            return this._nativeAudioNode.channelInterpretation;\n        }\n        set channelInterpretation(value) {\n            this._nativeAudioNode.channelInterpretation = value;\n        }\n        get context() {\n            return this._context;\n        }\n        get numberOfInputs() {\n            return this._nativeAudioNode.numberOfInputs;\n        }\n        get numberOfOutputs() {\n            return this._nativeAudioNode.numberOfOutputs;\n        }\n        // tslint:disable-next-line:invalid-void\n        connect(destination, output = 0, input = 0) {\n            // Bug #174: Safari does expose a wrong numberOfOutputs for MediaStreamAudioDestinationNodes.\n            if (output < 0 || output >= this._nativeAudioNode.numberOfOutputs) {\n                throw createIndexSizeError();\n            }\n            const nativeContext = getNativeContext(this._context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            if (isNativeAudioNode(destination) || isNativeAudioParam(destination)) {\n                throw createInvalidAccessError();\n            }\n            if (isAudioNode(destination)) {\n                const nativeDestinationAudioNode = getNativeAudioNode(destination);\n                try {\n                    const connection = connectNativeAudioNodeToNativeAudioNode(this._nativeAudioNode, nativeDestinationAudioNode, output, input);\n                    if (isOffline || isPassiveAudioNode(this)) {\n                        this._nativeAudioNode.disconnect(...connection);\n                    }\n                    else if (isPassiveAudioNode(destination)) {\n                        setInternalStateToActive(destination);\n                    }\n                    // An AudioWorklet needs a connection because it otherwise may truncate the input array.\n                    // @todo Count the number of connections which depend on this auxiliary GainNode to know when it can be removed again.\n                    if (isAudioWorkletNode(destination)) {\n                        const auxiliaryGainNodes = auxiliaryGainNodeStore.get(nativeDestinationAudioNode);\n                        if (auxiliaryGainNodes === undefined) {\n                            const nativeGainNode = nativeContext.createGain();\n                            nativeGainNode.connect(connection[0], 0, connection[2]);\n                            auxiliaryGainNodeStore.set(nativeDestinationAudioNode, new Map([[input, nativeGainNode]]));\n                        }\n                        else if (auxiliaryGainNodes.get(input) === undefined) {\n                            const nativeGainNode = nativeContext.createGain();\n                            nativeGainNode.connect(connection[0], 0, connection[2]);\n                            auxiliaryGainNodes.set(input, nativeGainNode);\n                        }\n                    }\n                }\n                catch (err) {\n                    // Bug #41: Only Chrome, Firefox and Opera throw the correct exception by now.\n                    if (err.code === 12) {\n                        throw createInvalidAccessError();\n                    }\n                    throw err;\n                }\n                const isNewConnectionToAudioNode = isOffline\n                    ? addConnectionToAudioNodeOfOfflineAudioContext(this, destination, output, input)\n                    : addConnectionToAudioNodeOfAudioContext(this, destination, output, input);\n                // Bug #164: Only Firefox detects cycles so far.\n                if (isNewConnectionToAudioNode) {\n                    const cycles = detectCycles([this], destination);\n                    visitEachAudioNodeOnce(cycles, createIncrementCycleCounter(isOffline));\n                }\n                return destination;\n            }\n            const nativeAudioParam = getNativeAudioParam(destination);\n            /*\n             * Bug #147 & #153: Safari does not support to connect an input signal to the playbackRate AudioParam of an\n             * AudioBufferSourceNode. This can't be easily detected and that's why the outdated name property is used here to identify\n             * Safari.\n             */\n            if (nativeAudioParam.name === 'playbackRate') {\n                throw createNotSupportedError();\n            }\n            try {\n                this._nativeAudioNode.connect(nativeAudioParam, output);\n                if (isOffline || isPassiveAudioNode(this)) {\n                    this._nativeAudioNode.disconnect(nativeAudioParam, output);\n                }\n            }\n            catch (err) {\n                // Bug #58: Only Firefox does throw an InvalidStateError yet.\n                if (err.code === 12) {\n                    throw createInvalidAccessError();\n                }\n                throw err;\n            }\n            const isNewConnectionToAudioParam = isOffline\n                ? addConnectionToAudioParamOfOfflineAudioContext(this, destination, output)\n                : addConnectionToAudioParamOfAudioContext(this, destination, output);\n            // Bug #164: Only Firefox detects cycles so far.\n            if (isNewConnectionToAudioParam) {\n                const cycles = detectCycles([this], destination);\n                visitEachAudioNodeOnce(cycles, createIncrementCycleCounter(isOffline));\n            }\n        }\n        disconnect(destinationOrOutput, output, input) {\n            let destinations;\n            if (destinationOrOutput === undefined) {\n                destinations = deleteAnyConnection(this);\n            }\n            else if (typeof destinationOrOutput === 'number') {\n                if (destinationOrOutput < 0 || destinationOrOutput >= this.numberOfOutputs) {\n                    throw createIndexSizeError();\n                }\n                destinations = deleteConnectionAtOutput(this, destinationOrOutput);\n            }\n            else {\n                if (output !== undefined && (output < 0 || output >= this.numberOfOutputs)) {\n                    throw createIndexSizeError();\n                }\n                if (isAudioNode(destinationOrOutput) && input !== undefined && (input < 0 || input >= destinationOrOutput.numberOfInputs)) {\n                    throw createIndexSizeError();\n                }\n                destinations = deleteConnectionToDestination(this, destinationOrOutput, output, input);\n                if (destinations.length === 0) {\n                    throw createInvalidAccessError();\n                }\n            }\n            // Bug #164: Only Firefox detects cycles so far.\n            for (const destination of destinations) {\n                const cycles = detectCycles([this], destination);\n                visitEachAudioNodeOnce(cycles, decrementCycleCounter);\n            }\n        }\n    };\n};\n//# sourceMappingURL=audio-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}