{"ast":null,"code":"import _slicedToArray from\"/Users/levipatel/Github/DingsAndEchoes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";// based off https://medium.com/@pdx.lucasm/canvas-with-react-js-32e133c05258\nimport React,{useState,useRef,useEffect,Component}from'react';import{Sampler}from\"tone\";import A1 from\"./audio/ding-1.wav\";import B1 from\"./audio/shaker-1.wav\";var Canvas=function Canvas(props){var canvasRef=useRef(null);// TODO: move out of component, should be passed as a prop\nvar draw=function draw(ctx){ctx.fillStyle='#000000';ctx.beginPath();ctx.arc(50,100,20,0,2*Math.PI);ctx.fill();};useEffect(function(){var canvas=canvasRef.current;var context=canvas.getContext('2d');//Our draw come here\ndraw(context);},[draw]);// TODO: move all tone generation to separate component/file\n//Setup for Sampler\nvar _useState=useState(false),_useState2=_slicedToArray(_useState,2),isLoaded=_useState2[0],setLoaded=_useState2[1];var sampler=useRef(null);//create Sampler after each render\nuseEffect(function(){sampler.current=new Sampler({A1:A1,B1:B1},{onload:function onload(){setLoaded(true);}}).toMaster();},[]);function playTone(note){if(isLoaded){sampler.current.triggerAttack(note);}}//Periodically call the two tones\nsetInterval(function(){return playTone(\"A1\");},3000);setInterval(function(){return playTone(\"B1\");},5000);return/*#__PURE__*/React.createElement(\"canvas\",Object.assign({ref:canvasRef},props));};export default Canvas;","map":{"version":3,"sources":["/Users/levipatel/Github/DingsAndEchoes/src/Canvas.js"],"names":["React","useState","useRef","useEffect","Component","Sampler","A1","B1","Canvas","props","canvasRef","draw","ctx","fillStyle","beginPath","arc","Math","PI","fill","canvas","current","context","getContext","isLoaded","setLoaded","sampler","onload","toMaster","playTone","note","triggerAttack","setInterval"],"mappings":"6JAAA;AACA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,MAA1B,CAAkCC,SAAlC,CAA6CC,SAA7C,KAA8D,OAA9D,CACA,OAASC,OAAT,KAAwB,MAAxB,CACA,MAAOC,CAAAA,EAAP,KAAe,oBAAf,CACA,MAAOC,CAAAA,EAAP,KAAe,sBAAf,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,CAAI,CAEtB,GAAMC,CAAAA,SAAS,CAAGR,MAAM,CAAC,IAAD,CAAxB,CAEA;AACA,GAAMS,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,CAAAC,GAAG,CAAI,CAClBA,GAAG,CAACC,SAAJ,CAAgB,SAAhB,CACAD,GAAG,CAACE,SAAJ,GACAF,GAAG,CAACG,GAAJ,CAAQ,EAAR,CAAY,GAAZ,CAAiB,EAAjB,CAAqB,CAArB,CAAwB,EAAEC,IAAI,CAACC,EAA/B,EACAL,GAAG,CAACM,IAAJ,GACD,CALD,CAOAf,SAAS,CAAC,UAAM,CAEd,GAAMgB,CAAAA,MAAM,CAAGT,SAAS,CAACU,OAAzB,CACA,GAAMC,CAAAA,OAAO,CAAGF,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAhB,CAEA;AACAX,IAAI,CAACU,OAAD,CAAJ,CACD,CAPQ,CAON,CAACV,IAAD,CAPM,CAAT,CASA;AAEA;AAvBsB,cAwBQV,QAAQ,CAAC,KAAD,CAxBhB,wCAwBfsB,QAxBe,eAwBLC,SAxBK,eAyBtB,GAAMC,CAAAA,OAAO,CAAGvB,MAAM,CAAC,IAAD,CAAtB,CAEA;AACAC,SAAS,CAAC,UAAM,CACdsB,OAAO,CAACL,OAAR,CAAkB,GAAIf,CAAAA,OAAJ,CAChB,CAAEC,EAAE,CAAFA,EAAF,CAAMC,EAAE,CAAFA,EAAN,CADgB,CAEhB,CACEmB,MAAM,CAAE,iBAAM,CACZF,SAAS,CAAC,IAAD,CAAT,CACD,CAHH,CAFgB,EAOhBG,QAPgB,EAAlB,CAQD,CATQ,CASN,EATM,CAAT,CAWA,QAASC,CAAAA,QAAT,CAAkBC,IAAlB,CAAwB,CACtB,GAAIN,QAAJ,CAAa,CACXE,OAAO,CAACL,OAAR,CAAgBU,aAAhB,CAA8BD,IAA9B,EACD,CACF,CAED;AACAE,WAAW,CAAE,iBAAMH,CAAAA,QAAQ,CAAC,IAAD,CAAd,EAAF,CAAwB,IAAxB,CAAX,CACAG,WAAW,CAAE,iBAAMH,CAAAA,QAAQ,CAAC,IAAD,CAAd,EAAF,CAAwB,IAAxB,CAAX,CAEA,mBAAO,4CAAQ,GAAG,CAAElB,SAAb,EAA4BD,KAA5B,EAAP,CACD,CAlDD,CAoDA,cAAeD,CAAAA,MAAf","sourcesContent":["// based off https://medium.com/@pdx.lucasm/canvas-with-react-js-32e133c05258\nimport React, { useState, useRef, useEffect, Component } from 'react';\nimport { Sampler } from \"tone\";\nimport A1 from \"./audio/ding-1.wav\";\nimport B1 from \"./audio/shaker-1.wav\";\n\nconst Canvas = props => {\n  \n  const canvasRef = useRef(null)\n  \n  // TODO: move out of component, should be passed as a prop\n  const draw = ctx => {\n    ctx.fillStyle = '#000000'\n    ctx.beginPath()\n    ctx.arc(50, 100, 20, 0, 2*Math.PI)\n    ctx.fill()\n  }\n  \n  useEffect(() => {\n    \n    const canvas = canvasRef.current\n    const context = canvas.getContext('2d')\n    \n    //Our draw come here\n    draw(context)\n  }, [draw])\n\n  // TODO: move all tone generation to separate component/file\n  \n  //Setup for Sampler\n  const [isLoaded, setLoaded] = useState(false);\n  const sampler = useRef(null);\n\n  //create Sampler after each render\n  useEffect(() => {\n    sampler.current = new Sampler(\n      { A1, B1 },\n      {\n        onload: () => {\n          setLoaded(true);\n        }\n      }\n    ).toMaster();\n  }, []);\n\n  function playTone(note) {\n    if (isLoaded){\n      sampler.current.triggerAttack(note);\n    }\n  }\n\n  //Periodically call the two tones\n  setInterval( () => playTone(\"A1\"), 3000);\n  setInterval( () => playTone(\"B1\"), 5000);\n\n  return <canvas ref={canvasRef} {...props}/>\n}\n\nexport default Canvas"]},"metadata":{},"sourceType":"module"}