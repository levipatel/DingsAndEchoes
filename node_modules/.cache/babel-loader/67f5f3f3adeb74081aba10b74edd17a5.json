{"ast":null,"code":"const DEFAULT_OPTIONS = {\n  channelCount: 6,\n  channelCountMode: 'explicit',\n  channelInterpretation: 'discrete',\n  numberOfOutputs: 6\n};\n\nconst sanitizedOptions = options => {\n  return { ...options,\n    channelCount: options.numberOfOutputs\n  };\n};\n\nexport const createChannelSplitterNodeConstructor = (audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class ChannelSplitterNode extends audioNodeConstructor {\n    constructor(context, options = DEFAULT_OPTIONS) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = sanitizedOptions({ ...DEFAULT_OPTIONS,\n        ...options\n      });\n      const nativeChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, mergedOptions);\n      const channelSplitterNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createChannelSplitterNodeRenderer() : null;\n      super(context, false, nativeChannelSplitterNode, channelSplitterNodeRenderer);\n    }\n\n  };\n};","map":{"version":3,"sources":["../../../src/factories/channel-splitter-node-constructor.ts"],"names":[],"mappings":"AAGA,MAAM,eAAe,GAAG;AACpB,EAAA,YAAY,EAAE,CADM;AAEpB,EAAA,gBAAgB,EAAE,UAFE;AAGpB,EAAA,qBAAqB,EAAE,UAHH;AAIpB,EAAA,eAAe,EAAE;AAJG,CAAxB;;AAOA,MAAM,gBAAgB,GAAI,OAAD,IAAqC;AAC1D,SAAO,EAAE,GAAG,OAAL;AAAc,IAAA,YAAY,EAAE,OAAO,CAAC;AAApC,GAAP;AACH,CAFD;;AAIA,OAAO,MAAM,oCAAoC,GAA2C,CACxF,oBADwF,EAExF,iCAFwF,EAGxF,+BAHwF,EAIxF,gBAJwF,EAKxF,2BALwF,KAMxF;AACA,SAAO,MAAM,mBAAN,SAAsD,oBAAtD,CAA6E;AAChF,IAAA,WAAA,CAAY,OAAZ,EAAwB,OAAA,GAA4C,eAApE,EAAmF;AAC/E,YAAM,aAAa,GAAG,gBAAgB,CAAC,OAAD,CAAtC;AACA,YAAM,aAAa,GAAG,gBAAgB,CAAC,EAAE,GAAG,eAAL;AAAsB,WAAG;AAAzB,OAAD,CAAtC;AACA,YAAM,yBAAyB,GAAG,+BAA+B,CAAC,aAAD,EAAgB,aAAhB,CAAjE;AACA,YAAM,2BAA2B,GAC5B,2BAA2B,CAAC,aAAD,CAA3B,GAA6C,iCAAiC,EAA9E,GAAmF,IADxF;AAIA,YAAM,OAAN,EAAe,KAAf,EAAsB,yBAAtB,EAAiD,2BAAjD;AACH;;AAV+E,GAApF;AAYH,CAnBM","sourceRoot":"","sourcesContent":["const DEFAULT_OPTIONS = {\n    channelCount: 6,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'discrete',\n    numberOfOutputs: 6\n};\nconst sanitizedOptions = (options) => {\n    return { ...options, channelCount: options.numberOfOutputs };\n};\nexport const createChannelSplitterNodeConstructor = (audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class ChannelSplitterNode extends audioNodeConstructor {\n        constructor(context, options = DEFAULT_OPTIONS) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = sanitizedOptions({ ...DEFAULT_OPTIONS, ...options });\n            const nativeChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, mergedOptions);\n            const channelSplitterNodeRenderer = ((isNativeOfflineAudioContext(nativeContext) ? createChannelSplitterNodeRenderer() : null));\n            super(context, false, nativeChannelSplitterNode, channelSplitterNodeRenderer);\n        }\n    };\n};\n//# sourceMappingURL=channel-splitter-node-constructor.js.map"]},"metadata":{},"sourceType":"module"}