{"ast":null,"code":"import { detachArrayBuffer } from '../helpers/detach-array-buffer';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport var createDecodeAudioData = function createDecodeAudioData(audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, detachedArrayBuffers, getNativeContext, isNativeContext, isNativeOfflineAudioContext, nativeOfflineAudioContextConstructor, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) {\n  return function (anyContext, audioData) {\n    var nativeContext = isNativeContext(anyContext) ? anyContext : getNativeContext(anyContext); // Bug #43: Only Chrome and Opera do throw a DataCloneError.\n\n    if (detachedArrayBuffers.has(audioData)) {\n      var err = createDataCloneError();\n      return Promise.reject(err);\n    } // The audioData parameter maybe of a type which can't be added to a WeakSet.\n\n\n    try {\n      detachedArrayBuffers.add(audioData);\n    } catch (_unused) {// Ignore errors.\n    } // Bug #21: Safari does not support promises yet.\n\n\n    if (cacheTestResult(testPromiseSupport, function () {\n      return testPromiseSupport(nativeContext);\n    })) {\n      // Bug #101: Edge does not decode something on a closed OfflineAudioContext.\n      var nativeContextOrBackupNativeContext = nativeContext.state === 'closed' && nativeOfflineAudioContextConstructor !== null && isNativeOfflineAudioContext(nativeContext) ? new nativeOfflineAudioContextConstructor(1, 1, nativeContext.sampleRate) : nativeContext;\n      var promise = nativeContextOrBackupNativeContext.decodeAudioData(audioData).catch(function (err) {\n        // Bug #27: Edge is rejecting invalid arrayBuffers with a DOMException.\n        if (err instanceof DOMException && err.name === 'NotSupportedError') {\n          throw new TypeError();\n        }\n\n        throw err;\n      });\n      return promise.then(function (audioBuffer) {\n        // Bug #157: Only Chrome & Opera do allow the bufferOffset to be out-of-bounds.\n        if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, function () {\n          return testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer);\n        })) {\n          wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n        }\n\n        audioBufferStore.add(audioBuffer);\n        return audioBuffer;\n      });\n    } // Bug #21: Safari does not return a Promise yet.\n\n\n    return new Promise(function (resolve, reject) {\n      var complete = function complete() {\n        // Bug #133: Safari does neuter the ArrayBuffer.\n        try {\n          detachArrayBuffer(audioData);\n        } catch (_unused2) {// Ignore errors.\n        }\n      };\n\n      var fail = function fail(err) {\n        reject(err);\n        complete();\n      }; // Bug #26: Safari throws a synchronous error.\n\n\n      try {\n        // Bug #1: Safari requires a successCallback.\n        nativeContext.decodeAudioData(audioData, function (audioBuffer) {\n          // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n          // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n          if (typeof audioBuffer.copyFromChannel !== 'function') {\n            wrapAudioBufferCopyChannelMethods(audioBuffer);\n            wrapAudioBufferGetChannelDataMethod(audioBuffer);\n          }\n\n          audioBufferStore.add(audioBuffer);\n          complete();\n          resolve(audioBuffer);\n        }, function (err) {\n          // Bug #4: Safari returns null instead of an error.\n          if (err === null) {\n            fail(createEncodingError());\n          } else {\n            fail(err);\n          }\n        });\n      } catch (err) {\n        fail(err);\n      }\n    });\n  };\n};","map":{"version":3,"sources":["../../../src/factories/decode-audio-data.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { detachArrayBuffer } from '../helpers/detach-array-buffer';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport const createDecodeAudioData = (audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, detachedArrayBuffers, getNativeContext, isNativeContext, isNativeOfflineAudioContext, nativeOfflineAudioContextConstructor, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n    return (anyContext, audioData) => {\n        const nativeContext = isNativeContext(anyContext) ? anyContext : getNativeContext(anyContext);\n        // Bug #43: Only Chrome and Opera do throw a DataCloneError.\n        if (detachedArrayBuffers.has(audioData)) {\n            const err = createDataCloneError();\n            return Promise.reject(err);\n        }\n        // The audioData parameter maybe of a type which can't be added to a WeakSet.\n        try {\n            detachedArrayBuffers.add(audioData);\n        }\n        catch {\n            // Ignore errors.\n        }\n        // Bug #21: Safari does not support promises yet.\n        if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeContext))) {\n            // Bug #101: Edge does not decode something on a closed OfflineAudioContext.\n            const nativeContextOrBackupNativeContext = nativeContext.state === 'closed' &&\n                nativeOfflineAudioContextConstructor !== null &&\n                isNativeOfflineAudioContext(nativeContext)\n                ? new nativeOfflineAudioContextConstructor(1, 1, nativeContext.sampleRate)\n                : nativeContext;\n            const promise = nativeContextOrBackupNativeContext.decodeAudioData(audioData).catch((err) => {\n                // Bug #27: Edge is rejecting invalid arrayBuffers with a DOMException.\n                if (err instanceof DOMException && err.name === 'NotSupportedError') {\n                    throw new TypeError();\n                }\n                throw err;\n            });\n            return promise.then((audioBuffer) => {\n                // Bug #157: Only Chrome & Opera do allow the bufferOffset to be out-of-bounds.\n                if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n                    wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n                }\n                audioBufferStore.add(audioBuffer);\n                return audioBuffer;\n            });\n        }\n        // Bug #21: Safari does not return a Promise yet.\n        return new Promise((resolve, reject) => {\n            const complete = () => {\n                // Bug #133: Safari does neuter the ArrayBuffer.\n                try {\n                    detachArrayBuffer(audioData);\n                }\n                catch {\n                    // Ignore errors.\n                }\n            };\n            const fail = (err) => {\n                reject(err);\n                complete();\n            };\n            // Bug #26: Safari throws a synchronous error.\n            try {\n                // Bug #1: Safari requires a successCallback.\n                nativeContext.decodeAudioData(audioData, (audioBuffer) => {\n                    // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n                    // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n                    if (typeof audioBuffer.copyFromChannel !== 'function') {\n                        wrapAudioBufferCopyChannelMethods(audioBuffer);\n                        wrapAudioBufferGetChannelDataMethod(audioBuffer);\n                    }\n                    audioBufferStore.add(audioBuffer);\n                    complete();\n                    resolve(audioBuffer);\n                }, (err) => {\n                    // Bug #4: Safari returns null instead of an error.\n                    if (err === null) {\n                        fail(createEncodingError());\n                    }\n                    else {\n                        fail(err);\n                    }\n                });\n            }\n            catch (err) {\n                fail(err);\n            }\n        });\n    };\n};\n//# sourceMappingURL=decode-audio-data.js.map"]},"metadata":{},"sourceType":"module"}